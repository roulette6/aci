---
# This playbook will create the following:
# a tenant, vrf, bd, ap, epg, spath, vlan pool, port selector with port block
# requirements: leaf interface profile must exist and be bound to a leaf profile
# ansible-playbook aci-create-infra.yml --extra-vars "apic=apic_pvt leaf_int_prof=leaf_1 switch_port=46 vlan_id=1607 playbook_action=query"

- name: "Create, edit, or delete Comcast customer"
  hosts: "{{ apic }}"
  vars:
    verb: "{{ 'Create' if playbook_action == 'present' else 'Delete' if playbook_action == 'absent' else 'Query' }}"
    tenant: jm-tenant
    vrf: jm-vrf
    bd: jm-bd
    ap: jm-ap
    epg: jm-epg
    epg_descr: "{{ jm-epg created by Ansible }}"
    domain: phys
    domain_type: phys

  tasks:
    - name: Assert that playbook action is query, present, or absent
      assert:
        that:
          - "playbook_action == 'query' or playbook_action == 'present' or  playbook_action == 'absent'"
        success_msg: "Playbook action is {{ playbook_action }}"
        fail_msg: Action must be query, present, or absent
        quiet: yes
      tags: assert


# Create tenant

    - name: "{{ verb }} tenant"
      aci_tenant:
        host: "{{ ansible_host }}"
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: no

        tenant: "{{ tenant }}"
        description: JM tenant created by Ansible
        state: "{{ playbook_action }}"
      delegate_to: localhost
      register: tenant_result
    
    - name: Display tenant results
      debug:
        var: tenant_result | json_query('current[].fvTenant.attributes.dn')


# Create VRF

    - name: "{{ verb }} VRF"
      aci_vrf:
        host: "{{ ansible_host }}"
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: no

        vrf: "{{ vrf }}"
        tenant: "{{ tenant }}"
        state: "{{ playbook_action }}"
      delegate_to: localhost
      register: vrf_result

    - name: Display tenant results
      debug:
        var: vrf_result | json_query('current[].fvCtx.attributes.dn')


# create BD

    - name: "{{ verb }} Bridge Domains"
      aci_bd:
        host: "{{ ansible_host }}"
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: no

        tenant: "{{ tenant }}"
        vrf: "{{ vrf }}"
        bd: "{{ bd }}"
        description: "{{ bd }} Created by Ansible"
        arp_flooding: yes
        l2_unknown_unicast: flood
        multi_dest: bd-flood
        enable_multicast: no
        ip_learning: yes
        enable_routing: no
        state: "{{ playbook_action }}"
      register: bd_results
      delegate_to: localhost

    - name: Show BD results
      debug:
        msg:
          - "{{ bd_results | json_query('current[0].fvBD.attributes.dn') }}"


  # Create AP

    - name: "{{ verb }} Application profile"
      aci_ap:
        host: "{{ ansible_host }}"
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: no

        tenant: "{{ tenant }}"
        ap: "{{ ap }}"
        description: "{{ ap }} created by Ansible"
        state: "{{ playbook_action }}"
      delegate_to: localhost
      register: ap_result
    
    - name: Show AP results
      debug:
        var: ap


  # create EPG and connect to domain

    - name: "{{ verb }} EPG"
      tags: epg
      aci_epg:
        host: "{{ ansible_host }}"
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: no

        tenant: "{{ tenant }}"
        bd: "{{ bd }}"
        ap: "{{ ap }}"
        epg: "{{ epg }}"
        description: "{{ epg }} created by Ansible"
        state: "{{ playbook_action }}"
      register: epg_result
      delegate_to: localhost

    - name: Show EPG results
      tags: epg
      debug:
        msg: "{{ epg_result | json_query('current[0].fvAEPg.attributes.dn') }}"

    - name: Connect EPG to Domain
      tags: epg
      aci_epg_to_domain:
        host: "{{ ansible_host }}"
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: no

        tenant: "{{ tenant }}"
        ap: "{{ ap }}"
        epg: "{{ epg }}"
        domain: "{{ domain }}"
        domain_type: "{{ domain_type }}"
        state: "{{ playbook_action }}"
      register: phy_dom_result
      delegate_to: localhost

    - name: Show EPG to domain connection results
      tags: epg
      debug:
        msg: "{{ phy_dom_result | json_query('current[].fvRsDomAtt.attributes.dn') }}"


# Create vlan pool encaps block

    - name: "{{ verb }} a VLAN pool for encap blocks"
      aci_vlan_pool_encap_block:
        host: "{{ ansible_host }}"
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: no

        pool: Heroes_general_pool
        pool_allocation_mode: static
        block_name: "jm-encaps-block"
        block_start: "1600"
        block_end: "1699"
        state: "{{ playbook_action }}"
      register: vlan_encaps_blk_result
      delegate_to: localhost
      tags: vlan

    - name: Show debug output for VLAN encapsulation
      debug:
        var: vlan_encaps_blk_result | json_query('current[].fvnsEncapBlk.attributes.dn')
      tags: vlan


# Create port block

    - name: "{{ verb }} access port selector"
      aci_access_port_to_interface_policy_leaf_profile:
        host: "{{ ansible_host }}"
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: no

        leaf_interface_profile: "{{ leaf_int_prof }}"
        access_port_selector: "jm-server1-sel"
        leaf_port_blk: "jm-server1-blk"
        from_port: "{{ switch_port }}"
        to_port: "{{ switch_port }}"
        policy_group: Heroes_standard_access
        state: "{{ playbook_action }}"
      register: port_block_result
      delegate_to: localhost
      tags: port

    - name: Show debug output for access port block
      debug:
        msg: "{{ port_block_result | json_query('[
          current[].infraHPortS.attributes.dn,
          current[].infraHPortS.children[].infraPortBlk.attributes.[name, fromPort, toPort],
          current[].infraHPortS.children[].infraRsAccBaseGrp.attributes.tDn
          ]') }}"
      tags: port

# Create static path bindings

    - name: "{{ verb }} static path bindings"
      aci_static_binding_to_epg:
        host: "{{ ansible_host }}"
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: no

        tenant: "{{ tenant }}"
        ap: "{{ ap }}"
        epg: "{{ epg }}"

        pod: 1
        leafs: 101
        interface: "1/{{ switch_port }}"

        interface_type: switch_port
        interface_mode: 802.1p
        encap_id: "{{ vlan_id }}"
        state: "{{ playbook_action }}"
      register: spath_result
      delegate_to: localhost
      tags: spath

    - name: Show static path results
      debug:
        var: spath_result | json_query('current[].fvRsPathAtt.attributes.[encap,dn]')
      tags: spath